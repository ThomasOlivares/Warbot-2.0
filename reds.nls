;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe verte basique
;; préfixe : durandil
;;
;; item 0 mem0 et item 1 mem0 : coordonnees d'une cible
;; mem5 : indique si le robot a ou non une cible sélectionnée
;; mem4 : indique si un harvester est en mode retour à la base
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to durandil-ask-for-energy [ b n ]
  ask b [ if (energy > 1000) [ give-energy myself n ]]
end

to-report durandil-number-agent-in-range
  report count perceive-robots friend
end

to durandil-plant-seeds
  ;; plante une graine
  plant-seeds color max-seeds
  ;; détermine la base la plus proche
  let b min-one-of my-bases [ distance myself ]
  ;; si le robot est arrivé à la base
  ifelse (distance b <= 2)
    [ 
      ;; dépose sa nourriture
      give-food b carrying-food?
      ;; demande de l'énergie si il reste moins de 1000
      if (energy < 1000) [ durandil-ask-for-energy b 300 ]
      set mem4 0
      ;; fait demi-tour
      rt 180
    ]
  ;; sinon
    [
      ;; s'oriente vers la base avec un peu d'aléatoire
      set heading towards b - 60 + random 120
      lt (25 - ( 50 * ( who mod 2) ) ) ;; turtle will orbit left or right, depending on its id
      ;; fait un demi tour si il y a du monde devant
      ifelse (free-ahead? speed = nobody)  [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
    ]
  
end

;;
;; rentre à la base si le robot transporte plus de 1000 unités de nourriture ou si son énergie est inférieure à 500 ou si c'est un rocket-launcher qui n'a plus de missiles
;;
to durandil-go-back-to-base
  ;; détermine la base la plus proche
  let b min-one-of my-bases [ distance myself ]
  ;; si le robot est arrivé à la base
  ifelse (distance b <= 2)
    [ 
      ;; dépose sa nourriture
      give-food b carrying-food?
      ;; demande de l'énergie si il reste moins de 1000
      if (energy < 1000) [ durandil-ask-for-energy b 300 ]
      ;; demande de l'énergie pour créer 5 missiles
      if (Breed = RocketLaunchers) [
        durandil-ask-for-energy b 500
        if (nb-missiles = 0)
        [
          durandil-ask-for-energy b 50
          new-missile 50
        ]
        if (nb-fafs = 0)
        [
          durandil-ask-for-energy b 250
          new-faf 5
        ]
      ]
      set mem4 0
      ;; fait demi-tour
      rt 180
    ]
  ;; sinon
    [
      ;; s'oriente vers la base avec un peu d'aléatoire
      set heading towards b - 20 + random 40
      ;; fait un demi tour si il y a du monde devant
      ifelse (free-ahead? speed = nobody)  [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
    ]
end

to durandil-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

to durandil-harvesters-go-and-eat
  let b min-one-of perceive-food [ distance myself ]
  ifelse (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take b ]
      [ set heading towards b - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
      ]
  ]
  [
    ifelse (mem5 = 1)
    [ 
      ifelse (distancexy item 0 mem0 item 1 mem0 > 1)
      [
        set heading towardsxy item 0 mem0 item 1 mem0
        ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
      ]
      [ set mem5 0 ]
    ]
    [ random-move ]
  ]
end

;;
;; la mémoire mem5 est à
;; - 0 si le robot n'a pas de cible sélectionnée
;; - 1 si le robot a une cible sélectionnée
;;
to-report durandil-no-target?
  report mem5 <= 0
end

to durandil-set-target-xy [ x y espece ]
  set mem0 replace-item 0 mem0 x 
  set mem0 replace-item 1 mem0 y 
  set mem2 espece 
  set mem5 1
end

to durandil-set-target-t [ t espece ]
  set mem0 t 
  set mem2 espece 
  set mem5 2
end

to durandil-set-food-target [ x y ]
  if (durandil-no-target?) 
  [ 
    set mem0 replace-item 0 mem0 x 
    set mem0 replace-item 1 mem0 y 
    set mem5 1 
  ] 
end

to durandil-call-rocket-launcher-xy [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ durandil-set-target-xy x y espece ]]
end

to durandil-call-rocket-launcher-t [ t espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy [xcor] of t [ycor] of t ]
  if (rl != nobody) [ ask rl [ durandil-set-target-t t espece ]]
end

to durandil-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [ durandil-set-target-xy x y espece ]
  ]
end

to durandil-call-harvester [ x y ]
  let h min-one-of perceive-specific-robots color harvesters [ distancexy x y ]
  if (h != nobody) [ ask h [ durandil-set-food-target x y ]]
end

;;
;; essaye de sélectionner une cible à viser
;;
to durandil-select-target
  ;; si le robot n'a pas une base adverse comme cible
  if (durandil-no-target?)
  [
    ;; il essaye de percevoir un robot ennemi (le plus proche de lui)
    let h min-one-of perceive-robots2 ennemy1 ennemy2 [ distance myself ]
    ;; si il en a vu un, il mémorise ses coordonnées et vérouille la cible
    ifelse ( h != nobody ) [
      set mem0  h
      set mem2 [breed] of h
      set mem5 2
    ]
    ;; sinon, il se dévérouille
    [ set mem5 0 ]
  ]
end

to-report durandil-dodge
  without-interruption [
    ifelse (mem4 = 1 or Breed != RocketLaunchers or mem0 = nobody)[
    ]
    [
      if ([Breed] of mem0 = RocketLaunchers)
      [
        set heading towards mem0
        rt 90
        forward-move speed
      ]
    ]
  ]
  report 0
end

to durandil-shoot 
  if (mem0 != nobody)[
    if (not durandil-no-target?)
    [
      ifelse (mem5 = 1)
      [ 
        launch-rocket towardsxy item 0 mem0 item 1 mem0 
        set mem5 0 
      ]
      [ 
        ifelse ((nb-fafs > 0) and (waiting = 0) and (mem0 != nobody))
        [
          launch-faf mem0
        ]
        [
          if (mem0 != nobody)
          [
            launch-rocket towards mem0
          ]
        ]
        set mem5 0 
      ]
    ]
  ]
end

to durandil-drive-harvesters
  let food one-of perceive-food
  if (food != nobody) [
    durandil-call-harvester [xcor] of food [ycor] of food 
  ]
end

to goRedExplorer
;  ifelse (carrying-food? > 1000) or (energy < 500) or ((Breed = RocketLaunchers) and (nb-missiles = 0))
  ifelse (energy < 500)
  [ durandil-go-back-to-base ]
  [ durandil-go-and-eat ]
  
  durandil-drive-harvesters

  ifelse (not durandil-no-target?) [
    durandil-call-rocket-launcher-xy item 0 mem0 item 1 mem0 mem2
    durandil-call-explorer item 0 mem0 item 1 mem0 mem2
  ]
  [ let h one-of perceive-robots2 ennemy1 ennemy2
    if ( h != nobody ) [ durandil-call-rocket-launcher-t h [breed] of h]
  ]
end

to goRedRocketLauncher
;  ifelse (carrying-food? > 1000) or (energy < 500) or ((Breed = RocketLaunchers) and (nb-missiles = 0))
  ifelse (energy < 500) or (nb-missiles = 0)
  [
    ;; rentre à la base si certaines conditions sont vérifiées
    
    durandil-go-back-to-base
  ]
  [
    ;; sinon sélectionne une cible
    durandil-select-target
    ifelse (durandil-no-target?)
    ;; si pas de cible, cherche à manger
    [ durandil-go-and-eat ]
    ;; sinon tire
    [ 
      durandil-shoot 
      ;let dummy durandil-dodge
    ]
  ]
  
  ;; crée un nouveau missile si plus de 3000 unités d'énergie
  if ((energy > 1000) and (nb-missiles < 5)) [ new-missile 1 ]
end

to goRedHarvester
  ifelse (mem4 = 1) or (carrying-food? > 500) or (energy < 500)
  [
    ; retour à la base
    set mem4 1
    ;; si il est assez proche de la base, l'aléatoire augmente pour planter plus
    if (min [ distance myself ] of my-bases < 10) and (carrying-food? > 300) [ 
      durandil-plant-seeds
    ]
    
    ;; rentre à la base si certaines conditions sont vérifiées
    durandil-go-back-to-base
    if (energy > 500) and (carrying-food? > 500) [ 
      ;; détermine la distance de la base la plus proche
      if (min [ distance myself ] of my-bases < 10) [
        plant-seeds color max-seeds
      ]
    ]
  ]
  [
    ;; cherche à manger
    durandil-harvesters-go-and-eat
  ]
end

to goRedBase
  set label energy
  if (nb-missiles < 10) and (energy > 1000) [ new-missile 50 ]
  if (energy > 12000) [ 
    ifelse (random 5 = 0) 
    [new-Explorer 1 self]
    [
      ifelse (random 2 = 0) 
      [ new-Harvester 1 self ]
      [ new-RocketLauncher 1 self ]
    ]
  ]
  let t one-of perceive-specific-robots2 ennemy1 ennemy2 rocketlaunchers
    if (t != nobody) [
      if (random 10 = 0) [launch-rocket towards t]
    ]
end

;; procedure pour initialiser les explorers verts
to initRedExplorer
  set mem0 [0 0]
end

;; procedure pour initialiser les rocket-launchers verts
to initRedRocketLauncher
  set mem0 [0 0]
end

;; procedure pour initialiser les harvesters verts
to initRedHarvester
  set mem0 [0 0]
end

;; procedure pour initialiser les bases verts
to initRedBase
  set mem0 [0 0]
  ; cré des explorers, des harvesters et des rocket-launchers
  new-Explorer 2 self
  new-Harvester 5 self
  new-RocketLauncher 2 self
end
